// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module vadd_compute_add (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        in1_stream_dout,
        in1_stream_empty_n,
        in1_stream_read,
        in1_stream_num_data_valid,
        in1_stream_fifo_cap,
        in2_stream_dout,
        in2_stream_empty_n,
        in2_stream_read,
        in2_stream_num_data_valid,
        in2_stream_fifo_cap,
        out_stream_din,
        out_stream_full_n,
        out_stream_write,
        out_stream_num_data_valid,
        out_stream_fifo_cap,
        size_dout,
        size_empty_n,
        size_read,
        size_num_data_valid,
        size_fifo_cap,
        size_c_din,
        size_c_full_n,
        size_c_write,
        size_c_num_data_valid,
        size_c_fifo_cap
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] in1_stream_dout;
input   in1_stream_empty_n;
output   in1_stream_read;
input  [2:0] in1_stream_num_data_valid;
input  [2:0] in1_stream_fifo_cap;
input  [31:0] in2_stream_dout;
input   in2_stream_empty_n;
output   in2_stream_read;
input  [2:0] in2_stream_num_data_valid;
input  [2:0] in2_stream_fifo_cap;
output  [31:0] out_stream_din;
input   out_stream_full_n;
output   out_stream_write;
input  [2:0] out_stream_num_data_valid;
input  [2:0] out_stream_fifo_cap;
input  [31:0] size_dout;
input   size_empty_n;
output   size_read;
input  [2:0] size_num_data_valid;
input  [2:0] size_fifo_cap;
output  [31:0] size_c_din;
input   size_c_full_n;
output   size_c_write;
input  [2:0] size_c_num_data_valid;
input  [2:0] size_c_fifo_cap;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in1_stream_read;
reg in2_stream_read;
reg out_stream_write;
reg size_read;
reg size_c_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    in1_stream_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln49_fu_99_p2;
reg    in2_stream_blk_n;
reg    out_stream_blk_n;
reg    size_blk_n;
reg    size_c_blk_n;
reg   [31:0] size_2_reg_129;
reg    ap_block_state1;
reg   [30:0] i_fu_50;
wire   [30:0] add_ln49_fu_104_p2;
reg    ap_block_state2;
wire   [31:0] zext_ln47_fu_95_p1;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 i_fu_50 = 31'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state2) & (icmp_ln49_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_50 <= 31'd0;
    end else if (((1'b0 == ap_block_state2) & (icmp_ln49_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        i_fu_50 <= add_ln49_fu_104_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_2_reg_129 <= size_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln49_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln49_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        in1_stream_blk_n = in1_stream_empty_n;
    end else begin
        in1_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln49_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        in1_stream_read = 1'b1;
    end else begin
        in1_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        in2_stream_blk_n = in2_stream_empty_n;
    end else begin
        in2_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln49_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        in2_stream_read = 1'b1;
    end else begin
        in2_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_stream_blk_n = out_stream_full_n;
    end else begin
        out_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2) & (icmp_ln49_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        out_stream_write = 1'b1;
    end else begin
        out_stream_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_blk_n = size_empty_n;
    end else begin
        size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_c_blk_n = size_c_full_n;
    end else begin
        size_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_c_write = 1'b1;
    end else begin
        size_c_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_read = 1'b1;
    end else begin
        size_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2) & (icmp_ln49_fu_99_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b0 == ap_block_state2) & (icmp_ln49_fu_99_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln49_fu_104_p2 = (i_fu_50 + 31'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (size_c_full_n == 1'b0) | (size_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2 = (((icmp_ln49_fu_99_p2 == 1'd1) & (out_stream_full_n == 1'b0)) | ((icmp_ln49_fu_99_p2 == 1'd1) & (in2_stream_empty_n == 1'b0)) | ((icmp_ln49_fu_99_p2 == 1'd1) & (in1_stream_empty_n == 1'b0)));
end

assign icmp_ln49_fu_99_p2 = (($signed(zext_ln47_fu_95_p1) < $signed(size_2_reg_129)) ? 1'b1 : 1'b0);

assign out_stream_din = (in2_stream_dout + in1_stream_dout);

assign size_c_din = size_dout;

assign zext_ln47_fu_95_p1 = i_fu_50;

endmodule //vadd_compute_add
