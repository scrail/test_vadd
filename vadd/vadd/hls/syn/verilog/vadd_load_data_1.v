// ==============================================================
// Generated by Vitis HLS v2025.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module vadd_load_data_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        m_axi_gmem1_0_AWVALID,
        m_axi_gmem1_0_AWREADY,
        m_axi_gmem1_0_AWADDR,
        m_axi_gmem1_0_AWID,
        m_axi_gmem1_0_AWLEN,
        m_axi_gmem1_0_AWSIZE,
        m_axi_gmem1_0_AWBURST,
        m_axi_gmem1_0_AWLOCK,
        m_axi_gmem1_0_AWCACHE,
        m_axi_gmem1_0_AWPROT,
        m_axi_gmem1_0_AWQOS,
        m_axi_gmem1_0_AWREGION,
        m_axi_gmem1_0_AWUSER,
        m_axi_gmem1_0_WVALID,
        m_axi_gmem1_0_WREADY,
        m_axi_gmem1_0_WDATA,
        m_axi_gmem1_0_WSTRB,
        m_axi_gmem1_0_WLAST,
        m_axi_gmem1_0_WID,
        m_axi_gmem1_0_WUSER,
        m_axi_gmem1_0_ARVALID,
        m_axi_gmem1_0_ARREADY,
        m_axi_gmem1_0_ARADDR,
        m_axi_gmem1_0_ARID,
        m_axi_gmem1_0_ARLEN,
        m_axi_gmem1_0_ARSIZE,
        m_axi_gmem1_0_ARBURST,
        m_axi_gmem1_0_ARLOCK,
        m_axi_gmem1_0_ARCACHE,
        m_axi_gmem1_0_ARPROT,
        m_axi_gmem1_0_ARQOS,
        m_axi_gmem1_0_ARREGION,
        m_axi_gmem1_0_ARUSER,
        m_axi_gmem1_0_RVALID,
        m_axi_gmem1_0_RREADY,
        m_axi_gmem1_0_RDATA,
        m_axi_gmem1_0_RLAST,
        m_axi_gmem1_0_RID,
        m_axi_gmem1_0_RFIFONUM,
        m_axi_gmem1_0_RUSER,
        m_axi_gmem1_0_RRESP,
        m_axi_gmem1_0_BVALID,
        m_axi_gmem1_0_BREADY,
        m_axi_gmem1_0_BRESP,
        m_axi_gmem1_0_BID,
        m_axi_gmem1_0_BUSER,
        in_r,
        in2_stream_din,
        in2_stream_full_n,
        in2_stream_write,
        in2_stream_num_data_valid,
        in2_stream_fifo_cap,
        size
);

parameter    ap_ST_fsm_state1 = 75'd1;
parameter    ap_ST_fsm_state2 = 75'd2;
parameter    ap_ST_fsm_state3 = 75'd4;
parameter    ap_ST_fsm_state4 = 75'd8;
parameter    ap_ST_fsm_state5 = 75'd16;
parameter    ap_ST_fsm_state6 = 75'd32;
parameter    ap_ST_fsm_state7 = 75'd64;
parameter    ap_ST_fsm_state8 = 75'd128;
parameter    ap_ST_fsm_state9 = 75'd256;
parameter    ap_ST_fsm_state10 = 75'd512;
parameter    ap_ST_fsm_state11 = 75'd1024;
parameter    ap_ST_fsm_state12 = 75'd2048;
parameter    ap_ST_fsm_state13 = 75'd4096;
parameter    ap_ST_fsm_state14 = 75'd8192;
parameter    ap_ST_fsm_state15 = 75'd16384;
parameter    ap_ST_fsm_state16 = 75'd32768;
parameter    ap_ST_fsm_state17 = 75'd65536;
parameter    ap_ST_fsm_state18 = 75'd131072;
parameter    ap_ST_fsm_state19 = 75'd262144;
parameter    ap_ST_fsm_state20 = 75'd524288;
parameter    ap_ST_fsm_state21 = 75'd1048576;
parameter    ap_ST_fsm_state22 = 75'd2097152;
parameter    ap_ST_fsm_state23 = 75'd4194304;
parameter    ap_ST_fsm_state24 = 75'd8388608;
parameter    ap_ST_fsm_state25 = 75'd16777216;
parameter    ap_ST_fsm_state26 = 75'd33554432;
parameter    ap_ST_fsm_state27 = 75'd67108864;
parameter    ap_ST_fsm_state28 = 75'd134217728;
parameter    ap_ST_fsm_state29 = 75'd268435456;
parameter    ap_ST_fsm_state30 = 75'd536870912;
parameter    ap_ST_fsm_state31 = 75'd1073741824;
parameter    ap_ST_fsm_state32 = 75'd2147483648;
parameter    ap_ST_fsm_state33 = 75'd4294967296;
parameter    ap_ST_fsm_state34 = 75'd8589934592;
parameter    ap_ST_fsm_state35 = 75'd17179869184;
parameter    ap_ST_fsm_state36 = 75'd34359738368;
parameter    ap_ST_fsm_state37 = 75'd68719476736;
parameter    ap_ST_fsm_state38 = 75'd137438953472;
parameter    ap_ST_fsm_state39 = 75'd274877906944;
parameter    ap_ST_fsm_state40 = 75'd549755813888;
parameter    ap_ST_fsm_state41 = 75'd1099511627776;
parameter    ap_ST_fsm_state42 = 75'd2199023255552;
parameter    ap_ST_fsm_state43 = 75'd4398046511104;
parameter    ap_ST_fsm_state44 = 75'd8796093022208;
parameter    ap_ST_fsm_state45 = 75'd17592186044416;
parameter    ap_ST_fsm_state46 = 75'd35184372088832;
parameter    ap_ST_fsm_state47 = 75'd70368744177664;
parameter    ap_ST_fsm_state48 = 75'd140737488355328;
parameter    ap_ST_fsm_state49 = 75'd281474976710656;
parameter    ap_ST_fsm_state50 = 75'd562949953421312;
parameter    ap_ST_fsm_state51 = 75'd1125899906842624;
parameter    ap_ST_fsm_state52 = 75'd2251799813685248;
parameter    ap_ST_fsm_state53 = 75'd4503599627370496;
parameter    ap_ST_fsm_state54 = 75'd9007199254740992;
parameter    ap_ST_fsm_state55 = 75'd18014398509481984;
parameter    ap_ST_fsm_state56 = 75'd36028797018963968;
parameter    ap_ST_fsm_state57 = 75'd72057594037927936;
parameter    ap_ST_fsm_state58 = 75'd144115188075855872;
parameter    ap_ST_fsm_state59 = 75'd288230376151711744;
parameter    ap_ST_fsm_state60 = 75'd576460752303423488;
parameter    ap_ST_fsm_state61 = 75'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 75'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 75'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 75'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 75'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 75'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 75'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 75'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 75'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 75'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 75'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 75'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 75'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 75'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 75'd18889465931478580854784;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem1_0_AWVALID;
input   m_axi_gmem1_0_AWREADY;
output  [63:0] m_axi_gmem1_0_AWADDR;
output  [0:0] m_axi_gmem1_0_AWID;
output  [31:0] m_axi_gmem1_0_AWLEN;
output  [2:0] m_axi_gmem1_0_AWSIZE;
output  [1:0] m_axi_gmem1_0_AWBURST;
output  [1:0] m_axi_gmem1_0_AWLOCK;
output  [3:0] m_axi_gmem1_0_AWCACHE;
output  [2:0] m_axi_gmem1_0_AWPROT;
output  [3:0] m_axi_gmem1_0_AWQOS;
output  [3:0] m_axi_gmem1_0_AWREGION;
output  [0:0] m_axi_gmem1_0_AWUSER;
output   m_axi_gmem1_0_WVALID;
input   m_axi_gmem1_0_WREADY;
output  [31:0] m_axi_gmem1_0_WDATA;
output  [3:0] m_axi_gmem1_0_WSTRB;
output   m_axi_gmem1_0_WLAST;
output  [0:0] m_axi_gmem1_0_WID;
output  [0:0] m_axi_gmem1_0_WUSER;
output   m_axi_gmem1_0_ARVALID;
input   m_axi_gmem1_0_ARREADY;
output  [63:0] m_axi_gmem1_0_ARADDR;
output  [0:0] m_axi_gmem1_0_ARID;
output  [31:0] m_axi_gmem1_0_ARLEN;
output  [2:0] m_axi_gmem1_0_ARSIZE;
output  [1:0] m_axi_gmem1_0_ARBURST;
output  [1:0] m_axi_gmem1_0_ARLOCK;
output  [3:0] m_axi_gmem1_0_ARCACHE;
output  [2:0] m_axi_gmem1_0_ARPROT;
output  [3:0] m_axi_gmem1_0_ARQOS;
output  [3:0] m_axi_gmem1_0_ARREGION;
output  [0:0] m_axi_gmem1_0_ARUSER;
input   m_axi_gmem1_0_RVALID;
output   m_axi_gmem1_0_RREADY;
input  [31:0] m_axi_gmem1_0_RDATA;
input   m_axi_gmem1_0_RLAST;
input  [0:0] m_axi_gmem1_0_RID;
input  [8:0] m_axi_gmem1_0_RFIFONUM;
input  [0:0] m_axi_gmem1_0_RUSER;
input  [1:0] m_axi_gmem1_0_RRESP;
input   m_axi_gmem1_0_BVALID;
output   m_axi_gmem1_0_BREADY;
input  [1:0] m_axi_gmem1_0_BRESP;
input  [0:0] m_axi_gmem1_0_BID;
input  [0:0] m_axi_gmem1_0_BUSER;
input  [63:0] in_r;
output  [31:0] in2_stream_din;
input   in2_stream_full_n;
output   in2_stream_write;
input  [2:0] in2_stream_num_data_valid;
input  [2:0] in2_stream_fifo_cap;
input  [31:0] size;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem1_0_ARVALID;
reg m_axi_gmem1_0_RREADY;
reg in2_stream_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [74:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem1_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem1_blk_n_R;
wire    ap_CS_fsm_state74;
reg    in2_stream_blk_n;
wire    ap_CS_fsm_state75;
reg   [31:0] size_read_reg_168;
reg    ap_block_state1;
wire   [30:0] empty_fu_100_p3;
reg   [30:0] empty_reg_173;
reg   [31:0] gmem1_addr_read_reg_192;
wire  signed [63:0] sext_ln41_fu_123_p1;
reg   [30:0] i_fu_56;
wire   [30:0] add_ln41_fu_150_p2;
wire    ap_CS_fsm_state73;
wire   [0:0] icmp_ln41_1_fu_145_p2;
wire   [0:0] icmp_ln41_fu_90_p2;
wire   [30:0] trunc_ln41_fu_96_p1;
wire   [61:0] trunc_ln_fu_113_p4;
wire   [31:0] zext_ln38_fu_141_p1;
reg   [74:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
reg    ap_ST_fsm_state74_blk;
reg    ap_ST_fsm_state75_blk;
wire   [63:0] m_axi_gmem1_0_ARLEN0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 75'd1;
#0 i_fu_56 = 31'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln41_1_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state73))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        i_fu_56 <= 31'd0;
    end else if (((icmp_ln41_1_fu_145_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state73))) begin
        i_fu_56 <= add_ln41_fu_150_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        empty_reg_173 <= empty_fu_100_p3;
        size_read_reg_168 <= size;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state74) & (m_axi_gmem1_0_RVALID == 1'b1))) begin
        gmem1_addr_read_reg_192 <= m_axi_gmem1_0_RDATA;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem1_0_ARREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem1_0_RVALID == 1'b0)) begin
        ap_ST_fsm_state74_blk = 1'b1;
    end else begin
        ap_ST_fsm_state74_blk = 1'b0;
    end
end

always @ (*) begin
    if ((in2_stream_full_n == 1'b0)) begin
        ap_ST_fsm_state75_blk = 1'b1;
    end else begin
        ap_ST_fsm_state75_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln41_1_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state73))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln41_1_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state73))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem1_blk_n_AR = m_axi_gmem1_0_ARREADY;
    end else begin
        gmem1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        gmem1_blk_n_R = m_axi_gmem1_0_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        in2_stream_blk_n = in2_stream_full_n;
    end else begin
        in2_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state75) & (in2_stream_full_n == 1'b1))) begin
        in2_stream_write = 1'b1;
    end else begin
        in2_stream_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem1_0_ARREADY == 1'b1))) begin
        m_axi_gmem1_0_ARVALID = 1'b1;
    end else begin
        m_axi_gmem1_0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) & (m_axi_gmem1_0_RVALID == 1'b1))) begin
        m_axi_gmem1_0_RREADY = 1'b1;
    end else begin
        m_axi_gmem1_0_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (m_axi_gmem1_0_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            if (((icmp_ln41_1_fu_145_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state73))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state74 : begin
            if (((1'b1 == ap_CS_fsm_state74) & (m_axi_gmem1_0_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state74;
            end
        end
        ap_ST_fsm_state75 : begin
            if (((1'b1 == ap_CS_fsm_state75) & (in2_stream_full_n == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln41_fu_150_p2 = (i_fu_56 + 31'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign empty_fu_100_p3 = ((icmp_ln41_fu_90_p2[0:0] == 1'b1) ? trunc_ln41_fu_96_p1 : 31'd0);

assign icmp_ln41_1_fu_145_p2 = (($signed(zext_ln38_fu_141_p1) < $signed(size_read_reg_168)) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_90_p2 = (($signed(size) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign in2_stream_din = gmem1_addr_read_reg_192;

assign m_axi_gmem1_0_ARADDR = sext_ln41_fu_123_p1;

assign m_axi_gmem1_0_ARBURST = 2'd0;

assign m_axi_gmem1_0_ARCACHE = 4'd0;

assign m_axi_gmem1_0_ARID = 1'd0;

assign m_axi_gmem1_0_ARLEN = m_axi_gmem1_0_ARLEN0;

assign m_axi_gmem1_0_ARLEN0 = empty_reg_173;

assign m_axi_gmem1_0_ARLOCK = 2'd0;

assign m_axi_gmem1_0_ARPROT = 3'd0;

assign m_axi_gmem1_0_ARQOS = 4'd0;

assign m_axi_gmem1_0_ARREGION = 4'd0;

assign m_axi_gmem1_0_ARSIZE = 3'd0;

assign m_axi_gmem1_0_ARUSER = 1'd0;

assign m_axi_gmem1_0_AWADDR = 64'd0;

assign m_axi_gmem1_0_AWBURST = 2'd0;

assign m_axi_gmem1_0_AWCACHE = 4'd0;

assign m_axi_gmem1_0_AWID = 1'd0;

assign m_axi_gmem1_0_AWLEN = 32'd0;

assign m_axi_gmem1_0_AWLOCK = 2'd0;

assign m_axi_gmem1_0_AWPROT = 3'd0;

assign m_axi_gmem1_0_AWQOS = 4'd0;

assign m_axi_gmem1_0_AWREGION = 4'd0;

assign m_axi_gmem1_0_AWSIZE = 3'd0;

assign m_axi_gmem1_0_AWUSER = 1'd0;

assign m_axi_gmem1_0_AWVALID = 1'b0;

assign m_axi_gmem1_0_BREADY = 1'b0;

assign m_axi_gmem1_0_WDATA = 32'd0;

assign m_axi_gmem1_0_WID = 1'd0;

assign m_axi_gmem1_0_WLAST = 1'b0;

assign m_axi_gmem1_0_WSTRB = 4'd0;

assign m_axi_gmem1_0_WUSER = 1'd0;

assign m_axi_gmem1_0_WVALID = 1'b0;

assign sext_ln41_fu_123_p1 = $signed(trunc_ln_fu_113_p4);

assign trunc_ln41_fu_96_p1 = size[30:0];

assign trunc_ln_fu_113_p4 = {{in_r[63:2]}};

assign zext_ln38_fu_141_p1 = i_fu_56;

endmodule //vadd_load_data_1
