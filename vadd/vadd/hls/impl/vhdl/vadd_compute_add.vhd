-- ==============================================================
-- Generated by Vitis HLS v2025.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2025 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vadd_compute_add is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in1_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in1_stream_empty_n : IN STD_LOGIC;
    in1_stream_read : OUT STD_LOGIC;
    in1_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    in1_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    in2_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in2_stream_empty_n : IN STD_LOGIC;
    in2_stream_read : OUT STD_LOGIC;
    in2_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    in2_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    out_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_full_n : IN STD_LOGIC;
    out_stream_write : OUT STD_LOGIC;
    out_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    out_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    size_empty_n : IN STD_LOGIC;
    size_read : OUT STD_LOGIC;
    size_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    size_c_full_n : IN STD_LOGIC;
    size_c_write : OUT STD_LOGIC;
    size_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0) );
end;


architecture behav of vadd_compute_add is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in1_stream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln49_fu_99_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal in2_stream_blk_n : STD_LOGIC;
    signal out_stream_blk_n : STD_LOGIC;
    signal size_blk_n : STD_LOGIC;
    signal size_c_blk_n : STD_LOGIC;
    signal size_2_reg_129 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal i_fu_50 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal add_ln49_fu_104_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal zext_ln47_fu_95_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state2) and (icmp_ln49_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_50 <= ap_const_lv31_0;
            elsif (((ap_const_boolean_0 = ap_block_state2) and (icmp_ln49_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_fu_50 <= add_ln49_fu_104_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                size_2_reg_129 <= size_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln49_fu_99_p2, ap_block_state1, ap_block_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2) and (icmp_ln49_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_boolean_0 = ap_block_state2) and (icmp_ln49_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln49_fu_104_p2 <= std_logic_vector(unsigned(i_fu_50) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2)
    begin
        if ((ap_const_boolean_1 = ap_block_state2)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, size_empty_n, size_c_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (size_c_full_n = ap_const_logic_0) or (size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(in1_stream_empty_n, in2_stream_empty_n, out_stream_full_n, icmp_ln49_fu_99_p2)
    begin
                ap_block_state2 <= (((icmp_ln49_fu_99_p2 = ap_const_lv1_1) and (out_stream_full_n = ap_const_logic_0)) or ((icmp_ln49_fu_99_p2 = ap_const_lv1_1) and (in2_stream_empty_n = ap_const_logic_0)) or ((icmp_ln49_fu_99_p2 = ap_const_lv1_1) and (in1_stream_empty_n = ap_const_logic_0)));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln49_fu_99_p2, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (icmp_ln49_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln49_fu_99_p2, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (icmp_ln49_fu_99_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln49_fu_99_p2 <= "1" when (signed(zext_ln47_fu_95_p1) < signed(size_2_reg_129)) else "0";

    in1_stream_blk_n_assign_proc : process(in1_stream_empty_n, ap_CS_fsm_state2, icmp_ln49_fu_99_p2)
    begin
        if (((icmp_ln49_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in1_stream_blk_n <= in1_stream_empty_n;
        else 
            in1_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in1_stream_read_assign_proc : process(ap_CS_fsm_state2, icmp_ln49_fu_99_p2, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (icmp_ln49_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in1_stream_read <= ap_const_logic_1;
        else 
            in1_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    in2_stream_blk_n_assign_proc : process(in2_stream_empty_n, ap_CS_fsm_state2, icmp_ln49_fu_99_p2)
    begin
        if (((icmp_ln49_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in2_stream_blk_n <= in2_stream_empty_n;
        else 
            in2_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in2_stream_read_assign_proc : process(ap_CS_fsm_state2, icmp_ln49_fu_99_p2, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (icmp_ln49_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in2_stream_read <= ap_const_logic_1;
        else 
            in2_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    out_stream_blk_n_assign_proc : process(out_stream_full_n, ap_CS_fsm_state2, icmp_ln49_fu_99_p2)
    begin
        if (((icmp_ln49_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_stream_blk_n <= out_stream_full_n;
        else 
            out_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_din <= std_logic_vector(unsigned(in2_stream_dout) + unsigned(in1_stream_dout));

    out_stream_write_assign_proc : process(ap_CS_fsm_state2, icmp_ln49_fu_99_p2, ap_block_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_state2) and (icmp_ln49_fu_99_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            out_stream_write <= ap_const_logic_1;
        else 
            out_stream_write <= ap_const_logic_0;
        end if; 
    end process;


    size_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, size_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_blk_n <= size_empty_n;
        else 
            size_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    size_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, size_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_c_blk_n <= size_c_full_n;
        else 
            size_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_c_din <= size_dout;

    size_c_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_c_write <= ap_const_logic_1;
        else 
            size_c_write <= ap_const_logic_0;
        end if; 
    end process;


    size_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_read <= ap_const_logic_1;
        else 
            size_read <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln47_fu_95_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_50),32));
end behav;
